import { Ionicons } from '@expo/vector-icons';
import { Picker } from '@react-native-picker/picker';
import { useEffect, useState } from 'react';
import {
    Modal,
    Platform,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity,
    View
} from 'react-native';

import { useTheme } from '../../components/ui/ThemeProvider';
import { getProfile, saveProfile } from '../../utils/supabaseStorage';
import { toast } from '../../utils/toast';

export default function ProfileScreen() {
    const { theme, toggle: toggleTheme, currentPalette, setPalette } = useTheme();
    const [profile, setProfile] = useState(null);
    const [loading, setLoading] = useState(true);
    const [isEditing, setIsEditing] = useState(false);
    const [editProfile, setEditProfile] = useState(null);
    const [menuOpen, setMenuOpen] = useState(false);
    const [notifications, setNotifications] = useState(true);
    const [darkMode, setDarkMode] = useState(false);

    useEffect(() => {
        loadProfile();
    }, []);

    const loadProfile = async () => {
        try {
            const userData = await getProfile();
            if (userData) {
                setProfile(userData);
            } else {
                const defaultProfile = {
                    name: 'User',
                    age: 25,
                    gender: 'other',
                    height: 170,
                    weight: 70,
                    activityLevel: 'moderate',
                    goal: 'maintain',
                    dailyCaloriesTarget: 2000,
                    dailyWaterTarget: 8,
                };
                setProfile(defaultProfile);
                await saveProfile(defaultProfile);
            }
        } catch (error) {
            console.error('Profile load error:', error);
        } finally {
            setLoading(false);
        }
    };

    const calculateBMI = (weight, height) => {
        if (!weight || !height || weight <= 0 || height <= 0) return null;
        const heightInMeters = height / 100;
        const bmi = weight / (heightInMeters * heightInMeters);
        return Math.round(bmi * 10) / 10; // Round to 1 decimal place
    };

    const getBMICategory = (bmi) => {
        if (!bmi) return { category: 'Unknown', color: theme.subText };
        if (bmi < 18.5) return { category: 'Underweight', color: '#3498db' };
        if (bmi < 25) return { category: 'Normal', color: '#27ae60' };
        if (bmi < 30) return { category: 'Overweight', color: '#f39c12' };
        return { category: 'Obese', color: '#e74c3c' };
    };

    const startEdit = () => {
        setEditProfile({ ...profile });
        setIsEditing(true);
    };

    const cancelEdit = () => {
        setEditProfile(null);
        setIsEditing(false);
    };

    const saveEdit = async () => {
        try {
            // Validate inputs
            if (!editProfile.name || editProfile.name.trim() === '') {
                toast('Name is required', 'error');
                return;
            }

            if (!editProfile.age || editProfile.age < 1 || editProfile.age > 120) {
                toast('Please enter a valid age (1-120)', 'error');
                return;
            }

            if (!editProfile.height || editProfile.height < 50 || editProfile.height > 300) {
                toast('Please enter a valid height (50-300 cm)', 'error');
                return;
            }

            if (!editProfile.weight || editProfile.weight < 20 || editProfile.weight > 500) {
                toast('Please enter a valid weight (20-500 kg)', 'error');
                return;
            }

            // Convert strings to numbers
            const normalizedProfile = {
                ...editProfile,
                age: parseInt(editProfile.age),
                height: parseFloat(editProfile.height),
                weight: parseFloat(editProfile.weight),
                dailyCaloriesTarget: parseInt(editProfile.dailyCaloriesTarget || 2000),
                dailyWaterTarget: parseInt(editProfile.dailyWaterTarget || 8),
            };

            await saveProfile(normalizedProfile);
            setProfile(normalizedProfile);
            setIsEditing(false);
            setEditProfile(null);
            toast('Profile updated successfully!', 'success');
        } catch (error) {
            console.error('Error saving profile:', error);
            toast('Failed to save profile', 'error');
        }
    };

    const handleThemeToggle = () => {
        setDarkMode(!darkMode);
        toggleTheme();
    };

    const handleExportData = () => {
        Alert.alert(
            'Export Data',
            'This feature will export your profile and meal data.',
            [{ text: 'OK' }]
        );
    };

    const handlePrivacySettings = () => {
        Alert.alert(
            'Privacy Settings',
            'Configure your data privacy preferences.',
            [{ text: 'OK' }]
        );
    };

    const handleSupport = () => {
        Alert.alert(
            'Support',
            'Contact our support team for help.',
            [{ text: 'OK' }]
        );
    };

    if (loading) {
        return (
            <ResponsiveLayout>
                <View style={styles.centerContainer}>
                    <Text style={[styles.loadingText, { color: theme.colors.text }]}>Loading...</Text>
                </View>
            </ResponsiveLayout>
        );
    }

    const bmi = profile ? calculateBMI(profile.weight, profile.height) : null;
    const bmiInfo = getBMICategory(bmi);

    return (
        <>
            <ResponsiveLayout showsVerticalScrollIndicator={false}>
                {/* Header with hamburger menu */}
                <View style={styles.header}>
                    <Text style={[styles.headerTitle, { color: theme.colors.text }]}>Profile</Text>
                    <TouchableOpacity
                        style={styles.menuButton}
                        onPress={() => setMenuOpen(true)}
                        hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
                    >
                        <Ionicons name="menu" size={24} color={theme.colors.text} />
                    </TouchableOpacity>
                </View>

                {profile && (
                    <>
                        {/* Profile Summary Card */}
                        <ResponsiveCard style={styles.profileCard}>
                            <View style={styles.profileHeader}>
                                <View style={[styles.avatar, { backgroundColor: theme.colors.primary }]}>
                                    <Text style={styles.avatarText}>
                                        {profile.name.charAt(0).toUpperCase()}
                                    </Text>
                                </View>
                                <View style={styles.profileInfo}>
                                    <Text style={[styles.profileName, { color: theme.colors.text }]}>
                                        {profile.name}
                                    </Text>
                                    <Text style={[styles.profileSubtitle, { color: theme.colors.textSecondary }]}>
                                        {profile.age} years â€¢ {profile.gender}
                                    </Text>
                                    <Text style={[styles.profileGoal, { color: theme.colors.textSecondary }]}>
                                        Goal: {(profile.goal || 'maintain').charAt(0).toUpperCase() + (profile.goal || 'maintain').slice(1)} Weight
                                    </Text>
                                </View>
                                <TouchableOpacity
                                    style={[styles.editIconButton, { backgroundColor: theme.colors.primaryLight }]}
                                    onPress={startEdit}
                                >
                                    <Ionicons name="create-outline" size={18} color={theme.colors.primary} />
                                </TouchableOpacity>
                            </View>
                        </ResponsiveCard>

                        {/* Health Stats Row */}
                        <View style={styles.statsGrid}>
                            <StatsCard
                                value={`${profile.height} cm`}
                                label="Height"
                                icon={<Ionicons name="resize-outline" size={20} color={theme.colors.primary} />}
                                color={theme.colors.primary}
                            />
                            <StatsCard
                                value={`${profile.weight} kg`}
                                label="Weight"
                                icon={<Ionicons name="barbell-outline" size={20} color={theme.colors.secondary} />}
                                color={theme.colors.secondary}
                            />
                        </View>

                        {/* BMI Card */}
                        <ResponsiveCard title="Body Mass Index">
                            <View style={styles.bmiContainer}>
                                <View style={styles.bmiValueContainer}>
                                    <Text style={[styles.bmiValue, { color: bmiInfo.color }]}>
                                        {bmi || 'N/A'}
                                    </Text>
                                    <Text style={[styles.bmiCategory, { color: bmiInfo.color }]}>
                                        {bmiInfo.category}
                                    </Text>
                                </View>
                                <View style={styles.bmiIndicator}>
                                    <View style={[styles.bmiBar, { backgroundColor: theme.colors.border }]}>
                                        <View
                                            style={[
                                                styles.bmiFill,
                                                {
                                                    backgroundColor: bmiInfo.color,
                                                    width: bmi ? `${Math.min((bmi / 40) * 100, 100)}%` : '0%'
                                                }
                                            ]}
                                        />
                                    </View>
                                </View>
                            </View>
                        </ResponsiveCard>

                        {/* Daily Goals Card */}
                        <ResponsiveCard title="Daily Targets">
                            <View style={styles.goalsContainer}>
                                <View style={styles.goalItem}>
                                    <View style={[styles.goalIcon, { backgroundColor: theme.colors.primaryLight }]}>
                                        <Ionicons name="flame-outline" size={20} color={theme.colors.primary} />
                                    </View>
                                    <View style={styles.goalText}>
                                        <Text style={[styles.goalLabel, { color: theme.colors.text }]}>Calories</Text>
                                        <Text style={[styles.goalValue, { color: theme.colors.textSecondary }]}>
                                            {profile.dailyCaloriesTarget || 2000} kcal
                                        </Text>
                                    </View>
                                </View>

                                <View style={styles.goalItem}>
                                    <View style={[styles.goalIcon, { backgroundColor: theme.colors.tertiaryLight }]}>
                                        <Ionicons name="water-outline" size={20} color={theme.colors.tertiary} />
                                    </View>
                                    <View style={styles.goalText}>
                                        <Text style={[styles.goalLabel, { color: theme.colors.text }]}>Water</Text>
                                        <Text style={[styles.goalValue, { color: theme.colors.textSecondary }]}>
                                            {profile.dailyWaterTarget || 8} glasses
                                        </Text>
                                    </View>
                                </View>
                            </View>
                        </ResponsiveCard>

                        {/* Quick Actions */}
                        <ResponsiveCard title="Quick Actions">
                            <View style={styles.actionsGrid}>
                                <ActionCard
                                    icon={<Ionicons name="create-outline" size={20} color={theme.colors.primary} />}
                                    title="Edit Profile"
                                    onPress={startEdit}
                                    style={styles.actionCardSmall}
                                />
                                <ActionCard
                                    icon={<Ionicons name="settings-outline" size={20} color={theme.colors.secondary} />}
                                    title="Settings"
                                    onPress={() => setMenuOpen(true)}
                                    style={styles.actionCardSmall}
                                />
                            </View>
                        </ResponsiveCard>
                    </>
                )}
            </ResponsiveLayout>

            {/* Hamburger Menu */}
            <HamburgerMenu
                visible={menuOpen}
                onClose={() => setMenuOpen(false)}
                title="Settings"
            >
                <MenuSection title="Appearance">
                    <MenuItem
                        icon="palette-outline"
                        title="Theme"
                        subtitle="Choose your color theme"
                        rightContent={
                            <PaletteSwitcher
                                currentPalette={currentPalette}
                                onPaletteChange={setPalette}
                                compact={true}
                            />
                        }
                    />
                    <MenuItem
                        icon="moon-outline"
                        title="Dark Mode"
                        subtitle="Toggle dark/light theme"
                        rightContent={
                            <Switch
                                value={darkMode}
                                onValueChange={handleThemeToggle}
                                trackColor={{ false: theme.colors.border, true: theme.colors.primary }}
                                thumbColor={theme.colors.surface}
                            />
                        }
                    />
                </MenuSection>

                <MenuSection title="Preferences">
                    <MenuItem
                        icon="notifications-outline"
                        title="Notifications"
                        subtitle="Meal reminders and alerts"
                        rightContent={
                            <Switch
                                value={notifications}
                                onValueChange={setNotifications}
                                trackColor={{ false: theme.colors.border, true: theme.colors.primary }}
                                thumbColor={theme.colors.surface}
                            />
                        }
                    />
                </MenuSection>

                <MenuSection title="Data">
                    <MenuItem
                        icon="download-outline"
                        title="Export Data"
                        subtitle="Download your profile and meals"
                        onPress={handleExportData}
                    />
                    <MenuItem
                        icon="shield-outline"
                        title="Privacy Settings"
                        subtitle="Manage your data privacy"
                        onPress={handlePrivacySettings}
                    />
                </MenuSection>

                <MenuSection title="Support">
                    <MenuItem
                        icon="help-circle-outline"
                        title="Help & Support"
                        subtitle="Get help with the app"
                        onPress={handleSupport}
                    />
                </MenuSection>
            </HamburgerMenu>

            {/* Edit Profile Modal */}
            <Modal
                visible={isEditing}
                animationType="slide"
                presentationStyle="pageSheet"
            >
                <KeyboardAvoidingView
                    style={{ flex: 1 }}
                    behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
                >
                    <View style={[styles.modalContainer, { backgroundColor: theme.background }]}>
                        <View style={styles.modalHeader}>
                            <TouchableOpacity onPress={cancelEdit}>
                                <Text style={[styles.modalHeaderButton, { color: theme.primary }]}>Cancel</Text>
                            </TouchableOpacity>
                            <Text style={[styles.modalTitle, { color: theme.text }]}>Edit Profile</Text>
                            <TouchableOpacity onPress={saveEdit}>
                                <Text style={[styles.modalHeaderButton, { color: theme.primary }]}>Save</Text>
                            </TouchableOpacity>
                        </View>

                        <ScrollView style={styles.modalContent} showsVerticalScrollIndicator={false}>
                            {editProfile && (
                                <>
                                    {/* Basic Info */}
                                    <View style={styles.inputGroup}>
                                        <Text style={[styles.inputLabel, { color: theme.text }]}>Name</Text>
                                        <TextInput
                                            style={[styles.textInput, {
                                                borderColor: theme.muted,
                                                color: theme.text,
                                                backgroundColor: theme.card
                                            }]}
                                            value={editProfile.name}
                                            onChangeText={(text) => setEditProfile({ ...editProfile, name: text })}
                                            placeholder="Your name"
                                            placeholderTextColor={theme.subText}
                                        />
                                    </View>

                                    <View style={styles.inputGroup}>
                                        <Text style={[styles.inputLabel, { color: theme.text }]}>Age</Text>
                                        <TextInput
                                            style={[styles.textInput, {
                                                borderColor: theme.muted,
                                                color: theme.text,
                                                backgroundColor: theme.card
                                            }]}
                                            value={editProfile.age?.toString()}
                                            onChangeText={(text) => setEditProfile({ ...editProfile, age: text })}
                                            placeholder="25"
                                            placeholderTextColor={theme.subText}
                                            keyboardType="numeric"
                                        />
                                    </View>

                                    <View style={styles.inputGroup}>
                                        <Text style={[styles.inputLabel, { color: theme.text }]}>Height (cm)</Text>
                                        <TextInput
                                            style={[styles.textInput, {
                                                borderColor: theme.muted,
                                                color: theme.text,
                                                backgroundColor: theme.card
                                            }]}
                                            value={editProfile.height?.toString()}
                                            onChangeText={(text) => setEditProfile({ ...editProfile, height: text })}
                                            placeholder="170"
                                            placeholderTextColor={theme.subText}
                                            keyboardType="numeric"
                                        />
                                    </View>

                                    <View style={styles.inputGroup}>
                                        <Text style={[styles.inputLabel, { color: theme.text }]}>Weight (kg)</Text>
                                        <TextInput
                                            style={[styles.textInput, {
                                                borderColor: theme.muted,
                                                color: theme.text,
                                                backgroundColor: theme.card
                                            }]}
                                            value={editProfile.weight?.toString()}
                                            onChangeText={(text) => setEditProfile({ ...editProfile, weight: text })}
                                            placeholder="70"
                                            placeholderTextColor={theme.subText}
                                            keyboardType="numeric"
                                        />
                                    </View>

                                    {/* BMI Preview */}
                                    {editProfile.height && editProfile.weight && (
                                        <View style={[styles.bmiPreview, { backgroundColor: theme.card }]}>
                                            <Text style={[styles.bmiPreviewLabel, { color: theme.text }]}>BMI Preview</Text>
                                            <Text style={[styles.bmiPreviewValue, {
                                                color: getBMICategory(calculateBMI(editProfile.weight, editProfile.height)).color
                                            }]}>
                                                {calculateBMI(editProfile.weight, editProfile.height)} - {getBMICategory(calculateBMI(editProfile.weight, editProfile.height)).category}
                                            </Text>
                                        </View>
                                    )}

                                    {/* Gender Picker */}
                                    <View style={styles.inputGroup}>
                                        <Text style={[styles.inputLabel, { color: theme.text }]}>Gender</Text>
                                        <View style={[styles.pickerContainer, {
                                            borderColor: theme.muted,
                                            backgroundColor: theme.card
                                        }]}>
                                            <Picker
                                                selectedValue={editProfile.gender}
                                                onValueChange={(value) => setEditProfile({ ...editProfile, gender: value })}
                                                style={{ color: theme.text }}
                                            >
                                                <Picker.Item label="Male" value="male" />
                                                <Picker.Item label="Female" value="female" />
                                                <Picker.Item label="Other" value="other" />
                                            </Picker>
                                        </View>
                                    </View>

                                    {/* Activity Level */}
                                    <View style={styles.inputGroup}>
                                        <Text style={[styles.inputLabel, { color: theme.text }]}>Activity Level</Text>
                                        <View style={[styles.pickerContainer, {
                                            borderColor: theme.muted,
                                            backgroundColor: theme.card
                                        }]}>
                                            <Picker
                                                selectedValue={editProfile.activityLevel}
                                                onValueChange={(value) => setEditProfile({ ...editProfile, activityLevel: value })}
                                                style={{ color: theme.text }}
                                            >
                                                <Picker.Item label="Sedentary" value="sedentary" />
                                                <Picker.Item label="Light" value="light" />
                                                <Picker.Item label="Moderate" value="moderate" />
                                                <Picker.Item label="Active" value="active" />
                                                <Picker.Item label="Very Active" value="very_active" />
                                            </Picker>
                                        </View>
                                    </View>

                                    {/* Goal */}
                                    <View style={styles.inputGroup}>
                                        <Text style={[styles.inputLabel, { color: theme.text }]}>Goal</Text>
                                        <View style={[styles.pickerContainer, {
                                            borderColor: theme.muted,
                                            backgroundColor: theme.card
                                        }]}>
                                            <Picker
                                                selectedValue={editProfile.goal}
                                                onValueChange={(value) => setEditProfile({ ...editProfile, goal: value })}
                                                style={{ color: theme.text }}
                                            >
                                                <Picker.Item label="Lose Weight" value="lose" />
                                                <Picker.Item label="Maintain Weight" value="maintain" />
                                                <Picker.Item label="Gain Weight" value="gain" />
                                            </Picker>
                                        </View>
                                    </View>

                                    {/* Daily Goals */}
                                    <View style={styles.inputGroup}>
                                        <Text style={[styles.inputLabel, { color: theme.text }]}>Daily Calorie Target</Text>
                                        <TextInput
                                            style={[styles.textInput, {
                                                borderColor: theme.muted,
                                                color: theme.text,
                                                backgroundColor: theme.card
                                            }]}
                                            value={editProfile.dailyCaloriesTarget?.toString()}
                                            onChangeText={(text) => setEditProfile({ ...editProfile, dailyCaloriesTarget: text })}
                                            placeholder="2000"
                                            placeholderTextColor={theme.subText}
                                            keyboardType="numeric"
                                        />
                                    </View>

                                    <View style={styles.inputGroup}>
                                        <Text style={[styles.inputLabel, { color: theme.text }]}>Daily Water Target (glasses)</Text>
                                        <TextInput
                                            style={[styles.textInput, {
                                                borderColor: theme.muted,
                                                color: theme.text,
                                                backgroundColor: theme.card
                                            }]}
                                            value={editProfile.dailyWaterTarget?.toString()}
                                            onChangeText={(text) => setEditProfile({ ...editProfile, dailyWaterTarget: text })}
                                            placeholder="8"
                                            placeholderTextColor={theme.subText}
                                            keyboardType="numeric"
                                        />
                                    </View>

                                    <View style={{ height: 50 }} />
                                </>
                            )}
                        </ResponsiveLayout>
                    </Modal>
                </>
                );
}

                const styles = StyleSheet.create({
                    container: {flex: 1, padding: 20 },
                center: {justifyContent: 'center', alignItems: 'center' },
                content: {flex: 1 },
                title: {fontSize: 28, fontWeight: 'bold', marginBottom: 20 },
                text: {fontSize: 16 },

                // Profile Cards
                card: {padding: 20, borderRadius: 16, alignItems: 'center' },
                cardTitle: {fontSize: 18, fontWeight: '600', marginBottom: 16, alignSelf: 'flex-start' },

                // Avatar
                avatar: {width: 80, height: 80, borderRadius: 40, justifyContent: 'center', alignItems: 'center', marginBottom: 16 },
                avatarText: {fontSize: 32, fontWeight: 'bold', color: '#ffffff' },

                // Profile Info
                name: {fontSize: 24, fontWeight: '600', marginBottom: 8 },
                subtitle: {fontSize: 16, marginBottom: 8, textAlign: 'center' },

                // Edit Button
                editButton: {
                    flexDirection: 'row',
                alignItems: 'center',
                padding: 12,
                borderRadius: 8,
                borderWidth: 1,
                gap: 8,
                marginTop: 16
    },
                editText: {fontSize: 16, fontWeight: '600' },

                // Stats
                statsRow: {flexDirection: 'row', justifyContent: 'space-around', width: '100%', marginBottom: 20 },
                statItem: {alignItems: 'center' },
                statLabel: {fontSize: 14, marginBottom: 4 },
                statValue: {fontSize: 20, fontWeight: '600' },

                // BMI
                bmiContainer: {alignItems: 'center', width: '100%' },
                bmiValue: {fontSize: 24, fontWeight: 'bold', marginVertical: 4 },
                bmiCategory: {fontSize: 16, fontWeight: '600' },

                // Goals
                goalRow: {
                    flexDirection: 'row',
                alignItems: 'center',
                width: '100%',
                paddingVertical: 8,
                gap: 12
    },
                goalLabel: {flex: 1, fontSize: 16 },
                goalValue: {fontSize: 16, fontWeight: '600' },

                // Modal
                modalContainer: {flex: 1 },
                modalHeader: {
                    flexDirection: 'row',
                justifyContent: 'space-between',
                alignItems: 'center',
                paddingHorizontal: 20,
                paddingVertical: 16,
                borderBottomWidth: 1,
                borderBottomColor: '#e0e0e0'
    },
                modalTitle: {fontSize: 18, fontWeight: '600' },
                modalHeaderButton: {fontSize: 16, fontWeight: '600' },
                headerButton: {
                    cursor: Platform.OS === 'web' ? 'pointer' : 'default',
                padding: 8,
    },
                modalContent: {flex: 1, padding: 20 },

                // Form Inputs
                inputGroup: {marginBottom: 20 },
                inputLabel: {fontSize: 16, fontWeight: '600', marginBottom: 8 },
                textInput: {
                    borderWidth: 1,
                borderRadius: 8,
                padding: 12,
                fontSize: 16,
                minHeight: 44
    },
                pickerContainer: {
                    borderWidth: 1,
                borderRadius: 8,
                overflow: 'hidden',
                minHeight: 44,
                justifyContent: 'center'
    },

                // BMI Preview
                bmiPreview: {
                    padding: 16,
                borderRadius: 8,
                marginBottom: 20,
                alignItems: 'center'
    },
                bmiPreviewLabel: {fontSize: 14, marginBottom: 4 },
                bmiPreviewValue: {fontSize: 18, fontWeight: 'bold' },
});