import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { useEffect, useState } from 'react';
import {
    Alert,
    Modal,
    ScrollView,
    StyleSheet,
    Switch,
    Text,
    TouchableOpacity,
    View,
} from 'react-native';
import ExportBackupManager from '../../components/forms/ExportBackupManager';
import PrimaryButton from '../../components/ui/PrimaryButton';
import SecondaryButton from '../../components/ui/SecondaryButton';
import { useTheme } from '../../components/ui/ThemeProvider';
import { getProfile, saveProfile } from '../../utils/storage';
import { toast } from '../../utils/toast';

const ProfileScreen = () => {
    const { theme } = useTheme();
    const router = useRouter();
    const [profile, setProfile] = useState(null);
    const [loading, setLoading] = useState(true);
    const [showExportModal, setShowExportModal] = useState(false);
    const [notificationsEnabled, setNotificationsEnabled] = useState(true);
    textSecondary: isDark ? '#b0b0b0' : '#666666',
        accent: '#4CAF50',
            border: isDark ? '#444444' : '#e0e0e0',
    };

useEffect(() => {
    loadUserProfile();
}, []);

const loadUserProfile = async () => {
    try {
        const userData = await getProfile();
        if (userData) {
            setProfile(userData);
        } else {
            // Set default profile
            const defaultProfile = {
                name: 'User',
                age: 25,
                gender: 'other',
                height: 170,
                weight: 70,
                activityLevel: 'moderate',
                goal: 'maintain',
                dailyCaloriesTarget: 2000,
                dailyWaterTarget: 8,
            };
            setProfile(defaultProfile);
            await saveProfile(defaultProfile);
        }
    } catch (error) {
        console.error('Error loading profile:', error);
    }
};

const showEditProfile = () => {
    Alert.alert(
        'Edit Profile',
        'Profile editing feature coming soon!',
        [{ text: 'OK' }]
    );
};

const handleNotificationToggle = (value) => {
    setNotificationsEnabled(value);
    // Save to storage
    AsyncStorage.setItem('notificationsEnabled', JSON.stringify(value));
};

const handleDataImported = () => {
    loadUserProfile();
    setShowExportModal(false);
    Alert.alert('Success', 'Data imported successfully! Please restart the app to see all changes.');
};

const ProfileItem = ({ icon, label, value, onPress, rightElement }) => (
    <TouchableOpacity
        style={[styles.profileItem, { backgroundColor: colors.surface, borderColor: colors.border }]}
        onPress={onPress}
    >
        <View style={styles.profileItemLeft}>
            <Ionicons name={icon} size={20} color={colors.accent} />
            <Text style={[styles.profileItemLabel, { color: colors.text }]}>
                {label}
            </Text>
        </View>
        <View style={styles.profileItemRight}>
            {rightElement || (
                <>
                    {value && (
                        <Text style={[styles.profileItemValue, { color: colors.textSecondary }]}>
                            {value}
                        </Text>
                    )}
                    <Ionicons name="chevron-forward" size={16} color={colors.textSecondary} />
                </>
            )}
        </View>
    </TouchableOpacity>
);

if (!profile) {
    return (
        <View style={[styles.container, styles.loading, { backgroundColor: colors.background }]}>
            <Text style={[styles.loadingText, { color: colors.text }]}>Loading profile...</Text>
        </View>
    );
}

return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
            {/* Header */}
            <View style={styles.header}>
                <Text style={[styles.title, { color: colors.text }]}>Profile</Text>
            </View>

            {/* Profile Summary */}
            <View style={[styles.profileSummary, { backgroundColor: colors.surface, borderColor: colors.border }]}>
                <View style={[styles.avatar, { backgroundColor: colors.accent }]}>
                    <Text style={styles.avatarText}>
                        {profile.name.charAt(0).toUpperCase()}
                    </Text>
                </View>
                <View style={styles.profileInfo}>
                    <Text style={[styles.profileName, { color: colors.text }]}>
                        {profile.name}
                    </Text>
                    <Text style={[styles.profileSubtitle, { color: colors.textSecondary }]}>
                        Goal: {profile.goal === 'lose' ? 'Lose Weight' :
                            profile.goal === 'gain' ? 'Gain Weight' : 'Maintain Weight'}
                    </Text>
                    <Text style={[styles.profileStats, { color: colors.textSecondary }]}>
                        {profile.height}cm • {profile.weight}kg • {profile.age} years
                    </Text>
                </View>
                <TouchableOpacity onPress={showEditProfile}>
                    <Ionicons name="create-outline" size={24} color={colors.accent} />
                </TouchableOpacity>
            </View>

            {/* Daily Targets */}
            <View style={styles.section}>
                <Text style={[styles.sectionTitle, { color: colors.text }]}>Daily Targets</Text>

                <ProfileItem
                    icon="flame-outline"
                    label="Calorie Goal"
                    value={`${profile.dailyCaloriesTarget} kcal`}
                    onPress={showEditProfile}
                />

                <ProfileItem
                    icon="water-outline"
                    label="Water Goal"
                    value={`${profile.dailyWaterTarget} glasses`}
                    onPress={showEditProfile}
                />
            </View>

            {/* Health Info */}
            <View style={styles.section}>
                <Text style={[styles.sectionTitle, { color: colors.text }]}>Health Information</Text>

                <ProfileItem
                    icon="body-outline"
                    label="Activity Level"
                    value={profile.activityLevel.charAt(0).toUpperCase() + profile.activityLevel.slice(1)}
                    onPress={showEditProfile}
                />

                <ProfileItem
                    icon="person-outline"
                    label="Gender"
                    value={profile.gender.charAt(0).toUpperCase() + profile.gender.slice(1)}
                    onPress={showEditProfile}
                />
            </View>

            {/* Settings */}
            <View style={styles.section}>
                <Text style={[styles.sectionTitle, { color: colors.text }]}>Settings</Text>

                <ProfileItem
                    icon="notifications-outline"
                    label="Notifications"
                    rightElement={
                        <Switch
                            value={notificationsEnabled}
                            onValueChange={handleNotificationToggle}
                            trackColor={{ false: colors.border, true: colors.accent }}
                            thumbColor={notificationsEnabled ? '#ffffff' : '#f4f3f4'}
                        />
                    }
                />
            </View>

            {/* Data Management */}
            <View style={styles.section}>
                <Text style={[styles.sectionTitle, { color: colors.text }]}>Data Management</Text>

                <ProfileItem
                    icon="download-outline"
                    label="Export & Backup"
                    onPress={() => setShowExportModal(true)}
                />

                <ProfileItem
                    icon="analytics-outline"
                    label="Usage Statistics"
                    onPress={() => Alert.alert('Coming Soon', 'Usage statistics feature coming soon!')}
                />
            </View>

            {/* About */}
            <View style={styles.section}>
                <Text style={[styles.sectionTitle, { color: colors.text }]}>About</Text>

                <ProfileItem
                    icon="help-circle-outline"
                    label="Help & Support"
                    onPress={() => Alert.alert('Help', 'Contact support at help@diettracker.com')}
                />

                <ProfileItem
                    icon="information-circle-outline"
                    label="App Version"
                    value="1.0.0"
                />
            </View>

            <View style={styles.bottomSpacing} />
        </ScrollView>

        {/* Export/Backup Modal */}
        <Modal
            visible={showExportModal}
            animationType="slide"
            presentationStyle="formSheet"
        >
            <ExportBackupManager
                onClose={() => setShowExportModal(false)}
                onDataImported={handleDataImported}
            />
        </Modal>
    </View>
);
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    loading: {
        justifyContent: 'center',
        alignItems: 'center',
    },
    loadingText: {
        fontSize: 16,
    },
    content: {
        flex: 1,
    },
    header: {
        paddingHorizontal: 20,
        paddingVertical: 20,
    },
    title: {
        fontSize: 28,
        fontWeight: 'bold',
    },
    profileSummary: {
        flexDirection: 'row',
        alignItems: 'center',
        marginHorizontal: 20,
        marginBottom: 24,
        padding: 20,
        borderRadius: 16,
        borderWidth: 1,
    },
    avatar: {
        width: 60,
        height: 60,
        borderRadius: 30,
        justifyContent: 'center',
        alignItems: 'center',
        marginRight: 16,
    },
    avatarText: {
        fontSize: 24,
        fontWeight: 'bold',
        color: '#ffffff',
    },
    profileInfo: {
        flex: 1,
    },
    profileName: {
        fontSize: 20,
        fontWeight: '600',
        marginBottom: 4,
    },
    profileSubtitle: {
        fontSize: 14,
        marginBottom: 4,
    },
    profileStats: {
        fontSize: 12,
    },
    section: {
        marginHorizontal: 20,
        marginBottom: 24,
    },
    sectionTitle: {
        fontSize: 18,
        fontWeight: '600',
        marginBottom: 12,
    },
    profileItem: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        padding: 16,
        borderRadius: 12,
        borderWidth: 1,
        marginBottom: 8,
    },
    profileItemLeft: {
        flexDirection: 'row',
        alignItems: 'center',
        flex: 1,
    },
    profileItemLabel: {
        fontSize: 16,
        marginLeft: 12,
        flex: 1,
    },
    profileItemRight: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    profileItemValue: {
        fontSize: 14,
        marginRight: 8,
    },
    bottomSpacing: {
        height: 40,
    },
});

export default ProfileScreen;
